{"file":"_...slug_-BLLthTHa.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,UAAM,QAAQ;AAMd,UAAM,OAAO;AAGP,UAAA,wBAAwB,IAAI,MAAM,UAAU;AAGlD;AAAA,MACE,MAAM,MAAM;AAAA,MACZ,CAAC,aAAa;AACZ,8BAAsB,QAAQ;AAAA,MAChC;AAAA,IAAA;AAII,UAAA,uBAAuB,CAAC,aAAa;AACzC,WAAK,qBAAqB,QAAQ;AAAA,IAAA,CACnC;AAED,UAAM,WAAmC;AAAA,MACvC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,CAAC,eAAe,GAAG;AAAA,MACnB,QAAQ;AAAA,MACR,eAAe;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;ACtCjB,UAAM,QAAQ;AAId,UAAM,eAAe,EAAE,MAAM,WAAW,MAAM,IAAI;AAE5C,UAAA,YAAY,SAAS,MAAM;AAC/B,aAAO,CAAC,cAAc,GAAI,MAAM,UAAU,CAAG,CAAA;AAAA,IAAA,CAC9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+FD,UAAM,EAAE,YAAY,SAAS,mBAAmB,aAAa;AACvD,UAAA,EAAE,UAAU;AAGZ,UAAA,eAAe,IAAI,CAAC;AAE1B,UAAM,UAAU;AAChB,UAAM,cAAc;AACS,qBAAiB;AAChC,aAAS;AACvB,UAAM,QAAQ;AACd,UAAM,cAAc,IAAI;AAAA,MACtB,EAAE,MAAM,WAAW,MAAM,QAAQ;AAAA,MACjC,EAAE,MAAM,+BAA+B;AAAA,IAAA,CACxC;AACD,UAAM,UAAU;AAAA,MAAS,MACvB,MAAM,MAAM,KAAK,CAAC,SAAc,KAAK,OAAO,QAAQ,MAAM,EAAE;AAAA,IAAA;AAG9D,UAAM,WAAW;AAAA,MAAS,MACxB,MAAM,MAAM,KAAK,CAAC;;AAAc,oBAAK,SAAOA,MAAA,QAAQ,UAAR,gBAAAA,IAAe;AAAA,OAAE;AAAA,IAAA;AAG/D,UAAM,mBAAmB,IAAI,SAAS,QAAQ,SAAS,MAAM,WAAW,CAAC;AACzE,UAAM,gBAAgB;AAAA,MACpB,SAAS,QACL,SAAS,MAAM,UACf,mBAAQ,UAAR,mBAAe,eAAf,mBAA2B,UAAU,OAAM;AAAA,IAAA;AAGjD,UAAM,aAAa,MAAM;AACvB,UAAI,QAAQ,OAAO;AACjB,mBAAW,QAAQ,KAAK;AACxB,cAAM,MAAM,oBAAoB;AAAA,MAAA,OAC3B;AACG,gBAAA;AAAA,UACN,GAAG,QAAQ;AAAA,UACX,UAAU,iBAAiB;AAAA,UAC3B,OAAO,cAAc;AAAA,QAAA,CACtB;AACD,cAAM,QAAQ,qBAAqB;AAAA,MACrC;AAAA,IAAA;AAGI,UAAA,UAAU,CAAC,WAAW;AAC1B,UAAI,QAAQ;AACV,yBAAiB,QAAQ,OAAO;AAChC,sBAAc,QAAQ,OAAO;AAAA,MAC/B;AAAA,IAAA,CACD;AAED,UAAM,aAAa,MAAM;AACvB,UAAI,QAAQ,OAAO;AACF,uBAAA;AAAA,UACb,IAAI,QAAQ,MAAM;AAAA,UAClB,OAAO,cAAc;AAAA,UACrB,UAAU,iBAAiB;AAAA,QAAA,CAC5B;AAAA,MACH;AAAA,IAAA;AAGI,UAAA,iBAAiB,CAAC,aAAqB;AAC3C,uBAAiB,QAAQ;AACd;IAAA;AAIP,UAAA,qBAAqB,CAAC,WAAgB;AAC7B,mBAAA,QAAQ,OAAO,YAAY;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["_a"],"sources":["../../../../components/ui/ColorSelect.vue","../../../../components/ui/Breadcrumbs.vue","../../../../pages/shop/[...slug].vue"],"sourcesContent":["<template>\r\n  <div class=\"select-color\">\r\n    <ul class=\"products_color_select\">\r\n      <li v-for=\"(color, index) in colors\" :key=\"index\">\r\n        <input\r\n          type=\"radio\"\r\n          :id=\"'color-' + index + '-' + id\"\r\n          :value=\"color\"\r\n          v-model=\"internalSelectedColor\"\r\n        />\r\n        <label :for=\"'color-' + index + '-' + id\">\r\n          <span :style=\"{ backgroundColor: colorMap[color] }\"></span>\r\n        </label>\r\n      </li>\r\n    </ul>\r\n    <div class=\"products_color_selected\">\r\n      Цвет: <span>{{ internalSelectedColor }}</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nconst props = defineProps<{\r\n  colors: string[];\r\n  id: number;\r\n  modelValue?: string;\r\n}>();\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\n// Локальная реактивная переменная для выбранного цвета\r\nconst internalSelectedColor = ref(props.modelValue);\r\n\r\n// Следим за изменениями и обновляем выбранный цвет\r\nwatch(\r\n  () => props.modelValue,\r\n  (newValue) => {\r\n    internalSelectedColor.value = newValue;\r\n  }\r\n);\r\n\r\n// Эмитируем событие при изменении цвета\r\nwatch(internalSelectedColor, (newValue) => {\r\n  emit(\"update:modelValue\", newValue);\r\n});\r\n\r\nconst colorMap: Record<string, string> = {\r\n  Бежевый: \"#D8D1B6\",\r\n  Зелёный: \"#547C51\",\r\n  Серый: \"#5B5E62\",\r\n  Темный: \"#342F2F\",\r\n  [\"Светло-жёлтый\"]: \"#EAECD7\",\r\n  Черный: \"#000000\",\r\n  \"Тёмно-серый\": \"#909090\",\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.products_color_select {\r\n  @include flex-start;\r\n  margin-bottom: 3.5rem;\r\n  gap: 2.1rem;\r\n  @include bp($point_2) {\r\n    gap: 1.5rem;\r\n    margin-bottom: 2rem;\r\n  }\r\n  li {\r\n    width: 3.5rem;\r\n    height: 3.5rem;\r\n  }\r\n\r\n  input {\r\n    display: none;\r\n    &:checked + label {\r\n      border: 0.1rem solid $brown;\r\n      span {\r\n        transform: scale(0.8);\r\n      }\r\n    }\r\n  }\r\n\r\n  label {\r\n    width: 100%;\r\n    height: 100%;\r\n    @include flex-center;\r\n    cursor: pointer;\r\n    span {\r\n      transition: all 0.3s ease-in-out;\r\n      width: 100%;\r\n      @include flex-center;\r\n      height: 100%;\r\n    }\r\n  }\r\n}\r\n\r\n.products_color_selected {\r\n  margin-bottom: 7rem;\r\n  font-size: 2.4rem;\r\n  font-family: $font_2;\r\n  @include flex-start;\r\n  gap: 0.5rem;\r\n  @include bp($point_2) {\r\n    margin-bottom: 2.5rem;\r\n    font-size: 1.6rem;\r\n  }\r\n  span {\r\n    color: $brown;\r\n    font-size: 2rem;\r\n    font-family: $font_1;\r\n    @include bp($point_2) {\r\n      font-size: 1.6rem;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <nav aria-label=\"breadcrumb\">\r\n    <ol class=\"breadcrumb\">\r\n      <li v-for=\"(crumb, index) in allCrumbs\" :key=\"index\" class=\"breadcrumb-item\">\r\n        <a v-if=\"crumb.href\" :href=\"crumb.href\">{{ crumb.text }}</a>\r\n        <span v-else>{{ crumb.text }}</span>\r\n      </li>\r\n    </ol>\r\n  </nav>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed } from \"vue\";\r\n\r\n// Props\r\nconst props = defineProps<{\r\n  crumbs?: { text: string; href?: string }[];\r\n}>();\r\n\r\nconst defaultCrumb = { text: \"Главная\", href: \"/\" };\r\n\r\nconst allCrumbs = computed(() => {\r\n  return [defaultCrumb, ...(props.crumbs || [])];\r\n});\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.breadcrumb {\r\n  @include flex-start;\r\n  flex-wrap: wrap;\r\n  color: $gray;\r\n  margin-bottom: 3rem;\r\n  li {\r\n    &:not(:last-child) {\r\n      &:after {\r\n        content: \"/\";\r\n        padding: 0 0.5rem;\r\n      }\r\n    }\r\n  }\r\n  a {\r\n    color: $brown;\r\n  }\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"single\" v-if=\"product\">\r\n    <div class=\"products\">\r\n      <div class=\"container\">\r\n        <Breadcrumbs :crumbs=\"breadcrumbs\" />\r\n        <div class=\"products_main\">\r\n          <div class=\"products_slider\">\r\n            <Swiper\r\n              :slides-per-view=\"1\"\r\n              :space-between=\"20\"\r\n              :modules=\"[Navigation, Pagination]\"\r\n              :navigation=\"{\r\n                prevEl: `.products_prev`,\r\n                nextEl: `.products_next`,\r\n              }\"\r\n              @slideChange=\"updateCurrentSlide\"\r\n            >\r\n              <SwiperSlide\r\n                v-for=\"(item, i) in product.images\"\r\n                :key=\"'products-item-slide-' + i\"\r\n              >\r\n                <img :src=\"item\" alt=\"\" />\r\n              </SwiperSlide>\r\n            </Swiper>\r\n            <div class=\"products_navigation\">\r\n              <div class=\"products_prev\">\r\n                <Icon name=\"bi:chevron-left\" size=\"30\" />\r\n              </div>\r\n              <div class=\"products-pagination\">\r\n                <span class=\"fraction\"\r\n                  >{{ currentSlide }}\r\n                  <div class=\"total\">/{{ totalSlides }}</div></span\r\n                >\r\n              </div>\r\n              <div class=\"products_next\">\r\n                <Icon name=\"bi:chevron-right\" size=\"30\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"products_content\">\r\n            <div class=\"products_content__head\">\r\n              <h3>{{ product.title }}</h3>\r\n              <div class=\"products_art\">Артикул {{ product.sku }}</div>\r\n            </div>\r\n            <div class=\"products_content_bottom\">\r\n              <ColorSelect\r\n                :id=\"product.slug\"\r\n                :colors=\"product.attributes.pa_colors\"\r\n                v-model=\"selectedColor\"\r\n              />\r\n\r\n              <div class=\"products_prices\">\r\n                <p>{{ product.price }} ₽</p>\r\n                <div class=\"product_cart__row\">\r\n                  <AddToCart\r\n                    :center=\"true\"\r\n                    :active=\"isCarts\"\r\n                    :name=\"isCarts ? 'В корзине' : 'Добавить в корзину'\"\r\n                    icon=\"custom:cart\"\r\n                    @click=\"toggleCart()\"\r\n                  />\r\n                  <Qty\r\n                    :initialQuantity=\"cartItem?.quantity || selectedQuantity\"\r\n                    v-if=\"isCarts\"\r\n                    @updateQuantity=\"updateQuantity\"\r\n                    @clear=\"removeCart(product)\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <ul class=\"products__nav\">\r\n                <li>\r\n                  <a href=\"#\"\r\n                    ><p>Характеристики</p>\r\n                    <Icon name=\"fluent:chevron-right-28-regular\" />\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href=\"#\"\r\n                    ><p>Отзывы</p>\r\n                    <Icon name=\"fluent:chevron-right-28-regular\" />\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <SingleAbout\r\n      :gallery=\"product.acf.galereya\"\r\n      :title=\"product.acf.about_product\"\r\n      :txt=\"product.acf.about_txt_product\"\r\n    />\r\n    <SingleCharacter\r\n      :title=\"product.acf.character_title\"\r\n      :img=\"product.acf.character_img.url\"\r\n      :list=\"product.acf.character_list\"\r\n    />\r\n    <SingleIdeas :gallery=\"product.acf.ideas_gallery\" />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport SingleCharacter from \"~/components/single/SingleCharacter.vue\";\r\nimport SingleIdeas from \"~/components/single/SingleIdeas.vue\";\r\nimport SingleAbout from \"~/components/single/SingleAbout.vue\";\r\nimport ColorSelect from \"~/components/ui/ColorSelect.vue\";\r\nimport AddToCart from \"~/components/ui/AddToCart.vue\";\r\nimport { Swiper, SwiperSlide } from \"swiper/vue\";\r\nimport { Navigation, Pagination } from \"swiper/modules\";\r\nimport Breadcrumbs from \"~/components/ui/Breadcrumbs.vue\";\r\nimport Qty from \"~/components/ui/Qty.vue\"; // Импортируем компонент для количества\r\nimport { useProductsStore } from \"~/store/useProductsStore\";\r\nimport { useRoute } from \"vue-router\";\r\nimport { ref, computed, onMounted } from \"vue\";\r\nimport { useCartStore, useCartStoreRefs } from \"~/store/useCartStore\";\r\nimport { useToast } from \"vue-toastification\";\r\n\r\nconst { removeCart, addCart, updateCartItem } = useCartStore();\r\nconst { carts } = useCartStoreRefs();\r\n\r\n// Переменные\r\nconst currentSlide = ref(1);\r\n\r\nconst product = ref<any>();\r\nconst totalSlides = ref();\r\nconst { getProductBySlug } = useProductsStore();\r\nconst route = useRoute();\r\nconst toast = useToast();\r\nconst breadcrumbs = ref([\r\n  { text: \"Каталог\", href: \"/shop\" },\r\n  { text: \"Бескаркасное кресло империал\" },\r\n]);\r\nconst isCarts = computed(() =>\r\n  carts.value.some((cart: any) => cart.id === product.value.id)\r\n);\r\n\r\nconst cartItem = computed(() =>\r\n  carts.value.find((cart: any) => cart.id === product.value?.id)\r\n);\r\n\r\nconst selectedQuantity = ref(cartItem.value ? cartItem.value.quantity : 1);\r\nconst selectedColor = ref(\r\n  cartItem.value\r\n    ? cartItem.value.color\r\n    : product.value?.attributes?.pa_colors[0] || \"\"\r\n);\r\n\r\nconst toggleCart = () => {\r\n  if (isCarts.value) {\r\n    removeCart(product.value);\r\n    toast.error(\"Удалено из корзины\");\r\n  } else {\r\n    addCart({\r\n      ...product.value,\r\n      quantity: selectedQuantity.value,\r\n      color: selectedColor.value,\r\n    });\r\n    toast.success(\"Добавлено в корзину\");\r\n  }\r\n};\r\n\r\nwatch(cartItem, (newVal) => {\r\n  if (newVal) {\r\n    selectedQuantity.value = newVal.quantity;\r\n    selectedColor.value = newVal.color;\r\n  }\r\n});\r\n\r\nconst updateCart = () => {\r\n  if (isCarts.value) {\r\n    updateCartItem({\r\n      id: product.value.id,\r\n      color: selectedColor.value,\r\n      quantity: selectedQuantity.value,\r\n    });\r\n  }\r\n};\r\n\r\nconst updateQuantity = (quantity: number) => {\r\n  selectedQuantity.value = quantity;\r\n  updateCart();\r\n};\r\n\r\n// Обновляем текущее состояние слайда\r\nconst updateCurrentSlide = (swiper: any) => {\r\n  currentSlide.value = swiper.realIndex + 1;\r\n};\r\n\r\n// Карта цветов\r\nconst colorMap: Record<string, string> = {\r\n  Бежевый: \"#D8D1B6\",\r\n  Зелёный: \"#547C51\",\r\n  Серый: \"#5B5E62\",\r\n  Темный: \"#342F2F\",\r\n  [\"Светло-жёлтый\"]: \"#EAECD7\",\r\n  Черный: \"#000000\",\r\n  \"Тёмно-серый\": \"#909090\",\r\n};\r\n\r\n// Обновление цвета\r\nconst updateSelectedColor = (color: string) => {\r\n  selectedColor.value = color;\r\n  console.log(color);\r\n};\r\n\r\nonMounted(async () => {\r\n  product.value = await getProductBySlug(route.params.slug[1]);\r\n  if (cartItem.value) {\r\n    selectedQuantity.value = cartItem.value.quantity;\r\n    selectedColor.value = cartItem.value.color;\r\n  }\r\n\r\n  totalSlides.value = product.value.images.length;\r\n});\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.products {\r\n  padding-top: calc($header + 4.6rem);\r\n  @include bp($point_2) {\r\n    padding-top: 7.5rem;\r\n  }\r\n}\r\n\r\n.products_main {\r\n  @include flex-start;\r\n  gap: 16.5rem;\r\n  align-items: flex-start;\r\n  @include bp($point_2) {\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n  }\r\n}\r\n\r\n.products_slider {\r\n  max-width: 99.5rem;\r\n  margin-bottom: 3rem;\r\n\r\n  @include bp($point_2) {\r\n    max-width: 100%;\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  :deep(.swiper-slide) {\r\n    height: 78.4rem;\r\n    // height: 100%;\r\n    @include flex-center;\r\n    @include bp($point_2) {\r\n      height: 24rem;\r\n    }\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n}\r\n\r\n.products_content__head {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 3rem;\r\n  margin-bottom: 5.6rem;\r\n  @include bp($point_2) {\r\n    gap: 1.5rem;\r\n    margin-bottom: 3rem;\r\n  }\r\n  h3 {\r\n    font-size: 4rem;\r\n    @include bp($point_2) {\r\n      font-size: 2.4rem;\r\n    }\r\n  }\r\n  .products_art {\r\n    color: $brown;\r\n  }\r\n}\r\n\r\n.products_prices {\r\n  font-size: 4rem;\r\n  font-family: $font_2;\r\n  margin-bottom: 8rem;\r\n  @include bp($point_2) {\r\n    margin-bottom: 3.5rem;\r\n    font-size: 2.2rem;\r\n  }\r\n  p {\r\n    margin-bottom: 7rem;\r\n    @include bp($point_2) {\r\n      margin-bottom: 3rem;\r\n    }\r\n  }\r\n}\r\n\r\n.products__nav {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2rem;\r\n  @include bp($point_2) {\r\n    gap: 1.5rem;\r\n  }\r\n  li {\r\n    &:first-child {\r\n      border-bottom: 0.1rem solid #d5d5d5;\r\n      padding-bottom: 2rem;\r\n      @include bp($point_2) {\r\n        padding-bottom: 1.5rem;\r\n      }\r\n    }\r\n    a {\r\n      @include flex-space;\r\n      color: $brown;\r\n      font-size: 2.4rem;\r\n      font-family: $font_2;\r\n      @include bp($point_2) {\r\n        font-size: 1.6rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.products_navigation {\r\n  @include flex-space;\r\n  margin-top: 3rem;\r\n\r\n  @include bp($point_2) {\r\n    display: none;\r\n  }\r\n\r\n  .products_prev,\r\n  .products_next {\r\n    color: $brown;\r\n    cursor: pointer;\r\n  }\r\n  div {\r\n    @include flex-center;\r\n  }\r\n}\r\n\r\n.fraction {\r\n  font-size: 2.4rem;\r\n  @include flex-center;\r\n  font-family: $font_2;\r\n}\r\n\r\n.total {\r\n  font-size: 2rem;\r\n  color: #ababab;\r\n  padding-left: 0.5rem;\r\n}\r\n\r\n.product_cart__row {\r\n  @include flex-start;\r\n  gap: 2rem;\r\n  :deep(.button) {\r\n    flex-grow: 1;\r\n  }\r\n}\r\n</style>\r\n"],"version":3}