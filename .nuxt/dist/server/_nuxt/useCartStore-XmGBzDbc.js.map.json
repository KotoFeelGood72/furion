{"file":"useCartStore-XmGBzDbc.js","mappings":";AAGa,MAAA,eAAe,YAAY,SAAS;AAAA,EAC/C,OAAO,OAAO;AAAA,IACZ,OAAO,CAAC;AAAA,IACR,cAAc,CAAC;AAAA,EAAA;AAAA,EAEjB,SAAS;AAAA,IACP,QAAQ,MAAW;AACjB,cAAQ,IAAI,IAAI;AACV,YAAA,mBAAmB,KAAK,MAAM;AAAA,QAClC,CAAC,SAAc,KAAK,OAAO,KAAK;AAAA,MAAA;AAElC,UAAI,kBAAkB;AACpB,yBAAiB,YAAY;AAAA,MAAA,OACxB;AACL,aAAK,MAAM,KAAK,EAAE,GAAG,MAAM,UAAU,GAAG;AAAA,MAC1C;AAAA,IACF;AAAA,IACA,WAAW,MAAW;AACd,YAAA,mBAAmB,KAAK,MAAM;AAAA,QAClC,CAAC,SAAc,KAAK,OAAO,KAAK;AAAA,MAAA;AAElC,UAAI,kBAAkB;AAChB,YAAA,iBAAiB,WAAW,GAAG;AACjC,2BAAiB,YAAY;AAAA,QAAA,OACxB;AACA,eAAA,QAAQ,KAAK,MAAM,OAAO,CAAC,SAAc,KAAK,OAAO,KAAK,EAAE;AAAA,QACnE;AAAA,MACF;AAAA,IACF;AAAA,IACA,eAAe,aAAkB;AACzB,YAAA,mBAAmB,KAAK,MAAM;AAAA,QAClC,CAAC,SAAc,KAAK,OAAO,YAAY;AAAA,MAAA;AAEzC,UAAI,kBAAkB;AACH,yBAAA,WACf,YAAY,YAAY,iBAAiB;AAC1B,yBAAA,QAAQ,YAAY,SAAS,iBAAiB;AAC9C,yBAAA,QAAQ,YAAY,SAAS,iBAAiB;AAAA,MACjE;AAAA,IACF;AAAA,IACA,eAAe,QAAgB;AACxB,WAAA,QAAQ,KAAK,MAAM,OAAO,CAAC,SAAc,KAAK,OAAO,MAAM;AAAA,IAClE;AAAA,IACA,MAAM,cAAc;AACd,UAAA;AACI,cAAA,EAAE,YAAY;AACpB,cAAM,WAAW,QAAQ;AAAA,UACvB;AAAA,UACA,KAAK;AAAA,QAAA;AAAA,eAEA,OAAO;AAAA,MAAC;AAAA,IACnB;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,SAAS,eAAe;AAAA,EAC1B;AACF,CAAC;AAEM,MAAM,mBAAmB,MAAM,YAAY,aAAc,CAAA;","names":[],"sources":["../../../../store/useCartStore.ts"],"sourcesContent":["import { defineStore, storeToRefs } from \"pinia\";\r\nimport axios from \"axios\";\r\n\r\nexport const useCartStore = defineStore(\"carts\", {\r\n  state: () => ({\r\n    carts: [] as any,\r\n    currentOrder: {} as any,\r\n  }),\r\n  actions: {\r\n    addCart(item: any) {\r\n      console.log(item);\r\n      const existingCartItem = this.carts.find(\r\n        (cart: any) => cart.id === item.id\r\n      );\r\n      if (existingCartItem) {\r\n        existingCartItem.quantity += 1;\r\n      } else {\r\n        this.carts.push({ ...item, quantity: 1 });\r\n      }\r\n    },\r\n    removeCart(item: any) {\r\n      const existingCartItem = this.carts.find(\r\n        (cart: any) => cart.id === item.id\r\n      );\r\n      if (existingCartItem) {\r\n        if (existingCartItem.quantity > 1) {\r\n          existingCartItem.quantity -= 1;\r\n        } else {\r\n          this.carts = this.carts.filter((cart: any) => cart.id !== item.id);\r\n        }\r\n      }\r\n    },\r\n    updateCartItem(updatedItem: any) {\r\n      const existingCartItem = this.carts.find(\r\n        (cart: any) => cart.id === updatedItem.id\r\n      );\r\n      if (existingCartItem) {\r\n        existingCartItem.quantity =\r\n          updatedItem.quantity || existingCartItem.quantity;\r\n        existingCartItem.color = updatedItem.color || existingCartItem.color;\r\n        existingCartItem.price = updatedItem.price || existingCartItem.price;\r\n      }\r\n    },\r\n    removeCartItem(itemId: string) {\r\n      this.carts = this.carts.filter((cart: any) => cart.id !== itemId);\r\n    },\r\n    async createOrder() {\r\n      try {\r\n        const { $domain } = useNuxtApp();\r\n        const response = $domain.post(\r\n          \"/wp-json/wc/v3/orders\",\r\n          this.currentOrder\r\n        );\r\n      } catch (error) {}\r\n    },\r\n  },\r\n  persist: {\r\n    storage: persistedState.localStorage,\r\n  },\r\n});\r\n\r\nexport const useCartStoreRefs = () => storeToRefs(useCartStore());\r\n"],"version":3}